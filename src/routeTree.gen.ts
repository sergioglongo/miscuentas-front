/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as DashboardRouteImport } from "./routes/dashboard/route";
import { Route as AuthRouteImport } from "./routes/auth/route";
import { Route as IndexImport } from "./routes/index";
import { Route as DashboardLayoutImport } from "./routes/dashboard/_layout";
import { Route as AuthLayoutImport } from "./routes/auth/_layout";

// Create Virtual Routes

const DashboardDashboardLazyImport = createFileRoute("/dashboard/dashboard")();
const AuthLoginLazyImport = createFileRoute("/auth/login")();

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
    id: "/_layout",
    getParentRoute: () => rootRoute,
} as any);

const DashboardRouteRoute = DashboardRouteImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
    id: "/auth",
    path: "/auth",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const DashboardDashboardLazyRoute = DashboardDashboardLazyImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
    import("./routes/dashboard/dashboard.lazy").then((d) => d.Route)
);

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
    id: "/login",
    path: "/login",
    getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import("./routes/auth/login.lazy").then((d) => d.Route));

const DashboardLayoutRoute = DashboardLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => DashboardRouteRoute,
} as any);

const AuthLayoutRoute = AuthLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => AuthRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/auth": {
            id: "/auth";
            path: "/auth";
            fullPath: "/auth";
            preLoaderRoute: typeof AuthRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/dashboard": {
            id: "/dashboard";
            path: "/dashboard";
            fullPath: "/dashboard";
            preLoaderRoute: typeof DashboardRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/_layout": {
            id: "/_layout";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof LayoutImport;
            parentRoute: typeof rootRoute;
        };
        "/auth/_layout": {
            id: "/auth/_layout";
            path: "";
            fullPath: "/auth";
            preLoaderRoute: typeof AuthLayoutImport;
            parentRoute: typeof AuthRouteImport;
        };
        "/dashboard/_layout": {
            id: "/dashboard/_layout";
            path: "";
            fullPath: "/dashboard";
            preLoaderRoute: typeof DashboardLayoutImport;
            parentRoute: typeof DashboardRouteImport;
        };
        "/auth/login": {
            id: "/auth/login";
            path: "/login";
            fullPath: "/auth/login";
            preLoaderRoute: typeof AuthLoginLazyImport;
            parentRoute: typeof AuthRouteImport;
        };
        "/dashboard/dashboard": {
            id: "/dashboard/dashboard";
            path: "/dashboard";
            fullPath: "/dashboard/dashboard";
            preLoaderRoute: typeof DashboardDashboardLazyImport;
            parentRoute: typeof DashboardRouteImport;
        };
    }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
    AuthLayoutRoute: typeof AuthLayoutRoute;
    AuthLoginLazyRoute: typeof AuthLoginLazyRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
    AuthLayoutRoute: AuthLayoutRoute,
    AuthLoginLazyRoute: AuthLoginLazyRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
    AuthRouteRouteChildren
);

interface DashboardRouteRouteChildren {
    DashboardLayoutRoute: typeof DashboardLayoutRoute;
    DashboardDashboardLazyRoute: typeof DashboardDashboardLazyRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
    DashboardLayoutRoute: DashboardLayoutRoute,
    DashboardDashboardLazyRoute: DashboardDashboardLazyRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
    DashboardRouteRouteChildren
);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/auth": typeof AuthLayoutRoute;
    "/dashboard": typeof DashboardLayoutRoute;
    "": typeof LayoutRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/dashboard/dashboard": typeof DashboardDashboardLazyRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/auth": typeof AuthLayoutRoute;
    "/dashboard": typeof DashboardLayoutRoute;
    "": typeof LayoutRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/dashboard/dashboard": typeof DashboardDashboardLazyRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/auth": typeof AuthRouteRouteWithChildren;
    "/dashboard": typeof DashboardRouteRouteWithChildren;
    "/_layout": typeof LayoutRoute;
    "/auth/_layout": typeof AuthLayoutRoute;
    "/dashboard/_layout": typeof DashboardLayoutRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/dashboard/dashboard": typeof DashboardDashboardLazyRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | "/"
        | "/auth"
        | "/dashboard"
        | ""
        | "/auth/login"
        | "/dashboard/dashboard";
    fileRoutesByTo: FileRoutesByTo;
    to:
        | "/"
        | "/auth"
        | "/dashboard"
        | ""
        | "/auth/login"
        | "/dashboard/dashboard";
    id:
        | "__root__"
        | "/"
        | "/auth"
        | "/dashboard"
        | "/_layout"
        | "/auth/_layout"
        | "/dashboard/_layout"
        | "/auth/login"
        | "/dashboard/dashboard";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    AuthRouteRoute: typeof AuthRouteRouteWithChildren;
    DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
    LayoutRoute: typeof LayoutRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AuthRouteRoute: AuthRouteRouteWithChildren,
    DashboardRouteRoute: DashboardRouteRouteWithChildren,
    LayoutRoute: LayoutRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/dashboard",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/route.ts",
      "children": [
        "/auth/_layout",
        "/auth/login"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.ts",
      "children": [
        "/dashboard/_layout",
        "/dashboard/dashboard"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth"
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx",
      "parent": "/auth"
    },
    "/dashboard/dashboard": {
      "filePath": "dashboard/dashboard.lazy.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */

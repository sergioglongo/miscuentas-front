/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as DashboardRouteImport } from "./routes/dashboard/route";
import { Route as ConfigsRouteImport } from "./routes/configs/route";
import { Route as AuthRouteImport } from "./routes/auth/route";
import { Route as AccountsRouteImport } from "./routes/accounts/route";
import { Route as IndexImport } from "./routes/index";
import { Route as DashboardLayoutImport } from "./routes/dashboard/_layout";
import { Route as ConfigsLayoutImport } from "./routes/configs/_layout";
import { Route as AuthLayoutImport } from "./routes/auth/_layout";
import { Route as AccountsLayoutImport } from "./routes/accounts/_layout";

// Create Virtual Routes

const DashboardMainLazyImport = createFileRoute("/dashboard/main")();
const ConfigsPanelLazyImport = createFileRoute("/configs/panel")();
const ConfigsConfigsLazyImport = createFileRoute("/configs/configs")();
const AuthLoginLazyImport = createFileRoute("/auth/login")();
const AccountsAdminLazyImport = createFileRoute("/accounts/admin")();

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
    id: "/_layout",
    getParentRoute: () => rootRoute,
} as any);

const DashboardRouteRoute = DashboardRouteImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => rootRoute,
} as any);

const ConfigsRouteRoute = ConfigsRouteImport.update({
    id: "/configs",
    path: "/configs",
    getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
    id: "/auth",
    path: "/auth",
    getParentRoute: () => rootRoute,
} as any);

const AccountsRouteRoute = AccountsRouteImport.update({
    id: "/accounts",
    path: "/accounts",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const DashboardMainLazyRoute = DashboardMainLazyImport.update({
    id: "/main",
    path: "/main",
    getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
    import("./routes/dashboard/main.lazy").then((d) => d.Route)
);

const ConfigsPanelLazyRoute = ConfigsPanelLazyImport.update({
    id: "/panel",
    path: "/panel",
    getParentRoute: () => ConfigsRouteRoute,
} as any).lazy(() =>
    import("./routes/configs/panel.lazy").then((d) => d.Route)
);

const ConfigsConfigsLazyRoute = ConfigsConfigsLazyImport.update({
    id: "/configs",
    path: "/configs",
    getParentRoute: () => ConfigsRouteRoute,
} as any).lazy(() =>
    import("./routes/configs/configs.lazy").then((d) => d.Route)
);

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
    id: "/login",
    path: "/login",
    getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import("./routes/auth/login.lazy").then((d) => d.Route));

const AccountsAdminLazyRoute = AccountsAdminLazyImport.update({
    id: "/admin",
    path: "/admin",
    getParentRoute: () => AccountsRouteRoute,
} as any).lazy(() =>
    import("./routes/accounts/admin.lazy").then((d) => d.Route)
);

const DashboardLayoutRoute = DashboardLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => DashboardRouteRoute,
} as any);

const ConfigsLayoutRoute = ConfigsLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => ConfigsRouteRoute,
} as any);

const AuthLayoutRoute = AuthLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => AuthRouteRoute,
} as any);

const AccountsLayoutRoute = AccountsLayoutImport.update({
    id: "/_layout",
    getParentRoute: () => AccountsRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/accounts": {
            id: "/accounts";
            path: "/accounts";
            fullPath: "/accounts";
            preLoaderRoute: typeof AccountsRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/auth": {
            id: "/auth";
            path: "/auth";
            fullPath: "/auth";
            preLoaderRoute: typeof AuthRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/configs": {
            id: "/configs";
            path: "/configs";
            fullPath: "/configs";
            preLoaderRoute: typeof ConfigsRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/dashboard": {
            id: "/dashboard";
            path: "/dashboard";
            fullPath: "/dashboard";
            preLoaderRoute: typeof DashboardRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/_layout": {
            id: "/_layout";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof LayoutImport;
            parentRoute: typeof rootRoute;
        };
        "/accounts/_layout": {
            id: "/accounts/_layout";
            path: "";
            fullPath: "/accounts";
            preLoaderRoute: typeof AccountsLayoutImport;
            parentRoute: typeof AccountsRouteImport;
        };
        "/auth/_layout": {
            id: "/auth/_layout";
            path: "";
            fullPath: "/auth";
            preLoaderRoute: typeof AuthLayoutImport;
            parentRoute: typeof AuthRouteImport;
        };
        "/configs/_layout": {
            id: "/configs/_layout";
            path: "";
            fullPath: "/configs";
            preLoaderRoute: typeof ConfigsLayoutImport;
            parentRoute: typeof ConfigsRouteImport;
        };
        "/dashboard/_layout": {
            id: "/dashboard/_layout";
            path: "";
            fullPath: "/dashboard";
            preLoaderRoute: typeof DashboardLayoutImport;
            parentRoute: typeof DashboardRouteImport;
        };
        "/accounts/admin": {
            id: "/accounts/admin";
            path: "/admin";
            fullPath: "/accounts/admin";
            preLoaderRoute: typeof AccountsAdminLazyImport;
            parentRoute: typeof AccountsRouteImport;
        };
        "/auth/login": {
            id: "/auth/login";
            path: "/login";
            fullPath: "/auth/login";
            preLoaderRoute: typeof AuthLoginLazyImport;
            parentRoute: typeof AuthRouteImport;
        };
        "/configs/configs": {
            id: "/configs/configs";
            path: "/configs";
            fullPath: "/configs/configs";
            preLoaderRoute: typeof ConfigsConfigsLazyImport;
            parentRoute: typeof ConfigsRouteImport;
        };
        "/configs/panel": {
            id: "/configs/panel";
            path: "/panel";
            fullPath: "/configs/panel";
            preLoaderRoute: typeof ConfigsPanelLazyImport;
            parentRoute: typeof ConfigsRouteImport;
        };
        "/dashboard/main": {
            id: "/dashboard/main";
            path: "/main";
            fullPath: "/dashboard/main";
            preLoaderRoute: typeof DashboardMainLazyImport;
            parentRoute: typeof DashboardRouteImport;
        };
    }
}

// Create and export the route tree

interface AccountsRouteRouteChildren {
    AccountsLayoutRoute: typeof AccountsLayoutRoute;
    AccountsAdminLazyRoute: typeof AccountsAdminLazyRoute;
}

const AccountsRouteRouteChildren: AccountsRouteRouteChildren = {
    AccountsLayoutRoute: AccountsLayoutRoute,
    AccountsAdminLazyRoute: AccountsAdminLazyRoute,
};

const AccountsRouteRouteWithChildren = AccountsRouteRoute._addFileChildren(
    AccountsRouteRouteChildren
);

interface AuthRouteRouteChildren {
    AuthLayoutRoute: typeof AuthLayoutRoute;
    AuthLoginLazyRoute: typeof AuthLoginLazyRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
    AuthLayoutRoute: AuthLayoutRoute,
    AuthLoginLazyRoute: AuthLoginLazyRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
    AuthRouteRouteChildren
);

interface ConfigsRouteRouteChildren {
    ConfigsLayoutRoute: typeof ConfigsLayoutRoute;
    ConfigsConfigsLazyRoute: typeof ConfigsConfigsLazyRoute;
    ConfigsPanelLazyRoute: typeof ConfigsPanelLazyRoute;
}

const ConfigsRouteRouteChildren: ConfigsRouteRouteChildren = {
    ConfigsLayoutRoute: ConfigsLayoutRoute,
    ConfigsConfigsLazyRoute: ConfigsConfigsLazyRoute,
    ConfigsPanelLazyRoute: ConfigsPanelLazyRoute,
};

const ConfigsRouteRouteWithChildren = ConfigsRouteRoute._addFileChildren(
    ConfigsRouteRouteChildren
);

interface DashboardRouteRouteChildren {
    DashboardLayoutRoute: typeof DashboardLayoutRoute;
    DashboardMainLazyRoute: typeof DashboardMainLazyRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
    DashboardLayoutRoute: DashboardLayoutRoute,
    DashboardMainLazyRoute: DashboardMainLazyRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
    DashboardRouteRouteChildren
);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/accounts": typeof AccountsLayoutRoute;
    "/auth": typeof AuthLayoutRoute;
    "/configs": typeof ConfigsLayoutRoute;
    "/dashboard": typeof DashboardLayoutRoute;
    "": typeof LayoutRoute;
    "/accounts/admin": typeof AccountsAdminLazyRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/configs/configs": typeof ConfigsConfigsLazyRoute;
    "/configs/panel": typeof ConfigsPanelLazyRoute;
    "/dashboard/main": typeof DashboardMainLazyRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/accounts": typeof AccountsLayoutRoute;
    "/auth": typeof AuthLayoutRoute;
    "/configs": typeof ConfigsLayoutRoute;
    "/dashboard": typeof DashboardLayoutRoute;
    "": typeof LayoutRoute;
    "/accounts/admin": typeof AccountsAdminLazyRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/configs/configs": typeof ConfigsConfigsLazyRoute;
    "/configs/panel": typeof ConfigsPanelLazyRoute;
    "/dashboard/main": typeof DashboardMainLazyRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/accounts": typeof AccountsRouteRouteWithChildren;
    "/auth": typeof AuthRouteRouteWithChildren;
    "/configs": typeof ConfigsRouteRouteWithChildren;
    "/dashboard": typeof DashboardRouteRouteWithChildren;
    "/_layout": typeof LayoutRoute;
    "/accounts/_layout": typeof AccountsLayoutRoute;
    "/auth/_layout": typeof AuthLayoutRoute;
    "/configs/_layout": typeof ConfigsLayoutRoute;
    "/dashboard/_layout": typeof DashboardLayoutRoute;
    "/accounts/admin": typeof AccountsAdminLazyRoute;
    "/auth/login": typeof AuthLoginLazyRoute;
    "/configs/configs": typeof ConfigsConfigsLazyRoute;
    "/configs/panel": typeof ConfigsPanelLazyRoute;
    "/dashboard/main": typeof DashboardMainLazyRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | "/"
        | "/accounts"
        | "/auth"
        | "/configs"
        | "/dashboard"
        | ""
        | "/accounts/admin"
        | "/auth/login"
        | "/configs/configs"
        | "/configs/panel"
        | "/dashboard/main";
    fileRoutesByTo: FileRoutesByTo;
    to:
        | "/"
        | "/accounts"
        | "/auth"
        | "/configs"
        | "/dashboard"
        | ""
        | "/accounts/admin"
        | "/auth/login"
        | "/configs/configs"
        | "/configs/panel"
        | "/dashboard/main";
    id:
        | "__root__"
        | "/"
        | "/accounts"
        | "/auth"
        | "/configs"
        | "/dashboard"
        | "/_layout"
        | "/accounts/_layout"
        | "/auth/_layout"
        | "/configs/_layout"
        | "/dashboard/_layout"
        | "/accounts/admin"
        | "/auth/login"
        | "/configs/configs"
        | "/configs/panel"
        | "/dashboard/main";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    AccountsRouteRoute: typeof AccountsRouteRouteWithChildren;
    AuthRouteRoute: typeof AuthRouteRouteWithChildren;
    ConfigsRouteRoute: typeof ConfigsRouteRouteWithChildren;
    DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
    LayoutRoute: typeof LayoutRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AccountsRouteRoute: AccountsRouteRouteWithChildren,
    AuthRouteRoute: AuthRouteRouteWithChildren,
    ConfigsRouteRoute: ConfigsRouteRouteWithChildren,
    DashboardRouteRoute: DashboardRouteRouteWithChildren,
    LayoutRoute: LayoutRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accounts",
        "/auth",
        "/configs",
        "/dashboard",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accounts": {
      "filePath": "accounts/route.ts",
      "children": [
        "/accounts/_layout",
        "/accounts/admin"
      ]
    },
    "/auth": {
      "filePath": "auth/route.ts",
      "children": [
        "/auth/_layout",
        "/auth/login"
      ]
    },
    "/configs": {
      "filePath": "configs/route.ts",
      "children": [
        "/configs/_layout",
        "/configs/configs",
        "/configs/panel"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.ts",
      "children": [
        "/dashboard/_layout",
        "/dashboard/main"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/accounts/_layout": {
      "filePath": "accounts/_layout.tsx",
      "parent": "/accounts"
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth"
    },
    "/configs/_layout": {
      "filePath": "configs/_layout.tsx",
      "parent": "/configs"
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard"
    },
    "/accounts/admin": {
      "filePath": "accounts/admin.lazy.tsx",
      "parent": "/accounts"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx",
      "parent": "/auth"
    },
    "/configs/configs": {
      "filePath": "configs/configs.lazy.tsx",
      "parent": "/configs"
    },
    "/configs/panel": {
      "filePath": "configs/panel.lazy.tsx",
      "parent": "/configs"
    },
    "/dashboard/main": {
      "filePath": "dashboard/main.lazy.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
